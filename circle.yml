version: 2.1

# testing jobs are all the same, so just use a template
defaults: &defaults
  parallelism: 1
  working_directory: ~/app
  docker:
    - image: cypress/base:10
  environment:
    TERM: xterm
  steps:
    - attach_workspace:
        at: ~/
    # some examples have the server part
    # so start it in the background
    - run:
        command: |
          cd examples/$CIRCLE_JOB
          npm run start --if-present
        name: start the server
        background: true
    - run:
        # only record the tests on Cypress Dashboard
        # if the record key is set. Usually it is NOT set
        # for forked pull request because environment variables
        # are not passed to the external PRs
        command: |
          cd examples/$CIRCLE_JOB
          if [ -z "$CYPRESS_RECORD_KEY" ]; then
            npm run cypress:run
          else
            npm run cypress:run -- --record --group $CIRCLE_JOB
          fi
        name: Cypress tests

jobs:
  # a single job that installs dependencies (NPM and Cypress)
  build:
    working_directory: ~/app
    docker:
      - image: cypress/base:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          key: cache-dirs-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "circle.yml" }}
      - run: npm ci

      # Use Git commit message to install any pre-release versions of Cypress
      - run: npm i -g @cypress/commit-message-install
      # if there is no special JSON comment in the current commit body
      # then this command does nothing
      - run: commit-message-install --else "echo nothing custom to install"

      # run verify and then save cache.
      # this ensures that the Cypress verified status is cached too
      - run: npm run cypress:verify
      - run: npm run stop-only
      - save_cache:
          key: cache-dirs-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "circle.yml" }}
          paths:
            - ~/.npm
            - ~/.cache
      # all other test jobs will run AFTER this build job finishes
      # to avoid reinstalling dependencies, we persist the source folder "app"
      # and the Cypress binary to workspace, which is the fastest way
      # for Circle jobs to pass files
      - persist_to_workspace:
          root: ~/
          paths:
            - app
            - .cache/Cypress

  # dummy job running after all end-to-end tests
  after-tests:
    docker:
      - image: cypress/base:10
    steps:
      - run: echo "all good"

  # a single utility job that can run multiple examples one by one
  # but with chunking
  test-examples:
    parallelism: 20
    working_directory: ~/app
    docker:
      - image: cypress/base:10
    environment:
      TERM: xterm
    steps:
      - attach_workspace:
          at: ~/
      # when running in parallel, the total number of parallel containers
      # is in variable CIRCLE_NODE_TOTAL and the current container index in CIRCLE_NODE_INDEX
      # which starts at 0 and goes to $CIRCLE_NODE_TOTAL - 1
      - run: npm run test:ci -- --chunk $CIRCLE_NODE_INDEX --total-chunks $CIRCLE_NODE_TOTAL

  # a single utility script to run multiple examples against Chrome
  test-examples-chrome:
    parallelism: 10
    working_directory: ~/app
    docker:
      - image: cypress/browsers:node12.0.0-chrome75
    environment:
      TERM: xterm
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test:ci:chrome -- --chunk $CIRCLE_NODE_INDEX --total-chunks $CIRCLE_NODE_TOTAL

  # a single utility script to run multiple examples against Brave browser
  test-examples-brave:
    # only one recipe shows how to run Cypress using Brave browser
    parallelism: 1
    working_directory: ~/app
    docker:
      - image: cypress/browsers:node12.13.0-chrome78-ff70-brave78
    environment:
      TERM: xterm
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test:ci:brave -- --chunk $CIRCLE_NODE_INDEX --total-chunks $CIRCLE_NODE_TOTAL

  # define a new job with defaults for each "examples/*" subfolder
  blogs__a11y:
    <<: *defaults
  blogs__application-actions:
    <<: *defaults
  blogs__codepen-demo:
    <<: *defaults
  blogs__direct-control-angular:
    <<: *defaults
  blogs__e2e-api-testing:
    <<: *defaults
  blogs__e2e-snapshots:
    <<: *defaults
  blogs__element-coverage:
    <<: *defaults
  blogs__testing-redux-store:
    <<: *defaults
  blogs__vue-vuex-rest:
    <<: *defaults
  extending-cypress__chai-assertions:
    <<: *defaults
  file-upload-react:
    <<: *defaults
  fundamentals__node-modules:
    <<: *defaults
  fundamentals__fixtures:
    <<: *defaults
  fundamentals__add-custom-command:
    <<: *defaults
  logging-in__csrf-tokens:
    <<: *defaults
  logging-in__html-web-forms:
    <<: *defaults
  logging-in__single-sign-on:
    <<: *defaults
  logging-in__xhr-web-forms:
    <<: *defaults
  logging-in__jwt:
    <<: *defaults
  logging-in__using-app-code:
    <<: *defaults
  preprocessors__grep:
    <<: *defaults
    # in this particular example we want to grep tests
    # and run only tests with name having "@admin"
    environment:
      CYPRESS_grep: '@admin'
  preprocessors__flow-browserify:
    <<: *defaults
  preprocessors__typescript-browserify:
    <<: *defaults
  preprocessors__typescript-webpack:
    <<: *defaults
  stubbing-spying__functions:
    <<: *defaults
  stubbing-spying__window-fetch:
    <<: *defaults
  stubbing-spying__google-analytics:
    <<: *defaults
  stubbing-spying__window:
    <<: *defaults
  stubbing-spying__console:
    <<: *defaults
  stubbing__resources:
    <<: *defaults
  testing-dom__drag-drop:
    <<: *defaults
  testing-dom__form-interactions:
    <<: *defaults
  testing-dom__hover-hidden-elements:
    <<: *defaults
  testing-dom__tab-handling-links:
    <<: *defaults
  testing-dom__wait-for-resource:
    <<: *defaults
  testing-dom__performance-metrics:
    <<: *defaults
  testing-dom__csv-table:
    <<: *defaults
  unit-testing__application-code:
    <<: *defaults
  unit-testing__react:
    <<: *defaults
  server-communication__bootstrapping-your-app:
    <<: *defaults
  server-communication__env-variables:
    <<: *defaults
  server-communication__seeding-database-in-node:
    <<: *defaults
  server-communication__xhr-assertions:
    <<: *defaults
  fundamentals__dynamic-tests:
    <<: *defaults
  fundamentals__module-api:
    <<: *defaults

# list all jobs to run and their dependencies here
# and then use this list from workflow definition
all_jobs: &all_jobs
  - build
  - test-examples:
      requires:
        - build
      filters:
        branches:
          only:
            - master
            - allow-testing-in-chunks

  - test-examples-chrome:
      requires:
        - build
      filters:
        branches:
          only:
            - master

  - test-examples-brave:
      requires:
        - build
      filters:
        branches:
          only:
            - master
            - 3.7.0

  # when adding new example subfolder with a recipe
  # add its name here to "create" CircleCI job

  # Do not run Codepen demo by default - because it depends on
  # the external service that sometimes gives 502 breaking our tests
  # - blogs__codepen-demo:
  #     requires:
  #       - build

  - blogs__a11y:
      requires:
        - build
  - blogs__application-actions:
      requires:
        - build
  - blogs__direct-control-angular:
      requires:
        - build
  - blogs__e2e-api-testing:
      requires:
        - build
  - blogs__e2e-snapshots:
      requires:
        - build
  - blogs__element-coverage:
      requires:
        - build
  - blogs__testing-redux-store:
      requires:
        - build
  - blogs__vue-vuex-rest:
      requires:
        - build
  - extending-cypress__chai-assertions:
      requires:
        - build
  - file-upload-react:
      requires:
        - build
  - fundamentals__node-modules:
      requires:
        - build
  - fundamentals__add-custom-command:
      requires:
        - build
  - logging-in__csrf-tokens:
      requires:
        - build
  - logging-in__html-web-forms:
      requires:
        - build
  - logging-in__single-sign-on:
      requires:
        - build
  - logging-in__xhr-web-forms:
      requires:
        - build
  - logging-in__jwt:
      requires:
        - build
  - logging-in__using-app-code:
      requires:
        - build
  - preprocessors__grep:
      requires:
        - build
  - preprocessors__flow-browserify:
      requires:
        - build
  - preprocessors__typescript-browserify:
      requires:
        - build
  - preprocessors__typescript-webpack:
      requires:
        - build
  - stubbing-spying__functions:
      requires:
        - build
  - stubbing-spying__window-fetch:
      requires:
        - build
  - stubbing-spying__console:
      requires:
        - build
  - stubbing-spying__window:
      requires:
        - build
  - stubbing-spying__google-analytics:
      requires:
        - build
  - stubbing__resources:
      requires:
        - build
  - testing-dom__drag-drop:
      requires:
        - build
  - testing-dom__form-interactions:
      requires:
        - build
  - testing-dom__hover-hidden-elements:
      requires:
        - build
  - testing-dom__tab-handling-links:
      requires:
        - build
  - testing-dom__wait-for-resource:
      requires:
        - build
  - testing-dom__csv-table:
      requires:
        - build
  - testing-dom__performance-metrics:
      requires:
        - build
  - unit-testing__application-code:
      requires:
        - build
  - unit-testing__react:
      requires:
        - build
  - server-communication__bootstrapping-your-app:
      requires:
        - build
  - server-communication__env-variables:
      requires:
        - build
  - server-communication__seeding-database-in-node:
      requires:
        - build
  - server-communication__xhr-assertions:
      requires:
        - build
  - fundamentals__dynamic-tests:
      requires:
        - build
  - fundamentals__fixtures:
      requires:
        - build
  - fundamentals__module-api:
      requires:
        - build

  # to avoid constantly tweaking required jobs on CircleCI
  # we can have a single job wait on all other test jobs here.
  # CircleCI can then just require this 1 job to pass
  # see https://glebbahmutov.com/blog/parallel-or-not/
  - after-tests:
      requires:
        - build
        - blogs__a11y
        - blogs__application-actions
        - blogs__direct-control-angular
        - blogs__e2e-api-testing
        - blogs__e2e-snapshots
        - blogs__element-coverage
        - blogs__testing-redux-store
        - blogs__vue-vuex-rest
        - extending-cypress__chai-assertions
        - file-upload-react
        - fundamentals__node-modules
        - fundamentals__fixtures
        - fundamentals__dynamic-tests
        - fundamentals__module-api
        - fundamentals__add-custom-command
        - logging-in__csrf-tokens
        - logging-in__html-web-forms
        - logging-in__single-sign-on
        - logging-in__xhr-web-forms
        - logging-in__jwt
        - logging-in__using-app-code
        - preprocessors__grep
        - preprocessors__flow-browserify
        - preprocessors__typescript-browserify
        - preprocessors__typescript-webpack
        - server-communication__bootstrapping-your-app
        - server-communication__env-variables
        - server-communication__seeding-database-in-node
        - server-communication__xhr-assertions
        - stubbing-spying__functions
        - stubbing-spying__window-fetch
        - stubbing-spying__google-analytics
        - stubbing-spying__window
        - stubbing-spying__console
        - stubbing__resources
        - testing-dom__drag-drop
        - testing-dom__form-interactions
        - testing-dom__hover-hidden-elements
        - testing-dom__tab-handling-links
        - testing-dom__wait-for-resource
        - testing-dom__csv-table
        - testing-dom__performance-metrics
        - unit-testing__application-code
        - unit-testing__react
        # "meta" jobs
        - test-examples
        - test-examples-chrome

workflows:
  version: 2

  # run this workflow on each commit and pull request
  all-recipes:
    jobs: *all_jobs

  # since this is testing a lot of external sites
  # let's run these tests once per day (at night)
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *all_jobs
